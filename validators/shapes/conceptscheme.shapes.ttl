@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sdo: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <https://data.surroundaustralia.com/shapes/conceptscheme/> .


<TitleShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:message "A vocabulary's ConceptScheme must have either a skos:prefLabel, dcterms:title or rdfs:label property (a Literal) and may only have at most one of each per language." ;
    sh:xone (
        [
            sh:property [
                sh:path skos:prefLabel ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ]
        [
            sh:property [
                sh:path dcterms:title ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ]
        [
            sh:property [                
                sh:path rdfs:label ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ]         
    ) ;
.

<DescriptionShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:message "A vocabulary's ConceptScheme must have either a skos:definition, dcterms:description or rdfs:comment property (a Literal) and may only have at most one of each per language." ;
    sh:xone (
        [
            sh:property [
                sh:path skos:definition ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ] 
        [
            sh:property [
                sh:path dcterms:description ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ] 
        [
            sh:property [
                sh:path rdfs:comment ;
                sh:minCount 1 ;
                sh:uniqueLang true ;
            ]
        ]    
    ) ;
.

<CreatorShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path dcterms:creator ;
        sh:minCount 1 ;
        sh:or (
            [
                sh:class sdo:Organization ;
            ]
            [
                sh:class sdo:Person ;
            ]
        ) ;       
        sh:message "A vocabulary's ConceptScheme must have a dcterms:creator property (an sdo:Organization or an sdo:Person)" ;
    ] ;  
.

<PublisherShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path dcterms:publisher;
        sh:minCount 1 ;
        sh:or (
            [
                sh:class sdo:Organization ;
            ]
            [
                sh:class sdo:Person ;
            ]
        ) ;        
        sh:message "A vocabulary's ConceptScheme must have a dcterms:publisher property (an IRI)" ;
    ] ;
.

<DatesShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path dcterms:created ;
        sh:minCount 1 ;
        sh:maxCount 1 ; 
        sh:or (
            [
                sh:datatype xsd:dateTime ;
            ]
            [
                sh:datatype xsd:date ;
            ]
            [
                sh:datatype xsd:dateTimeStamp ;
            ]            
        ) ;
        sh:message "A vocabulary's ConceptScheme must have a dcterms:created property that must be either an xsd:date, xsd:dateTime or xsd:dateTimeStamp." ;
    ] ; 
    sh:property [
        sh:path dcterms:modified ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [
                sh:datatype xsd:dateTime ;
            ]
            [
                sh:datatype xsd:date ;
            ]
            [
                sh:datatype xsd:dateTimeStamp ;
            ]
        ) ;
        sh:message "A vocabulary's ConceptScheme must have a dcterms:modified property that must be either an xsd:date, xsd:dateTime or xsd:dateTimeStamp." ;
    ] ;
.

#
#   ConceptScheme specific
# 
<TopConceptShape>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:or (
        [
            sh:property [
                sh:path skos:hasTopConcept ;
                sh:minCount 1 ;
                sh:nodeKind sh:IRI ;
                
            ] ;  
        ]
        [
            sh:property [
                sh:path [sh:inversePath skos:topConceptOf] ;
                sh:minCount 1 ;
                sh:nodeKind sh:IRI ;
            ] ;  
        ] 
    ) ;
    sh:message "A vocabulary's ConceptScheme must have at least one skos:hasTopConcept property (an IRI, indicating a Concept) or at least on Concept's skos:topConceptOf property must indicate the ConceptScheme." ;
.